
2019.9.11
1、Android开发的两种方式。Eclipse + ADT + Android SDK。 或者使用Android Studio开发。
2、Android项目结构。

    .gradel和.idea自动生成的文件夹，不用管。
    app，项目的主要文件加。
        build，存放编译时候生成的文件，不用关心。
        libs，存放项目中使用的第三方jar包。该包下的内容会自动添加到构建路径中去。
        src，资源文件。
            androidTest，编写测试代码。
            main，主要文件。
                java，存放java代码。
                res，存放资源文件。存放图片、图标、布局、配置等。
                    drawable、存放图片。
                    layout、存放布局。
                    menu，以前有物理按键的时候会用到。
                    mimap、存放app图标。
                    values、存放字符串、样式、颜色等配置。
            AndroidManifest.xml，项目的配置文件。
         .gitignore，版本控制的忽略文件。
         app.iml，自动生成，不需要关系。
         build.gradle（和xcode中，info.plist很想）， app模块中gradel构建版本，里面有很多gradel配置项。包括版本号、appid等。
         proguard-rules.pro， 用于代码混淆的规则。
     gradle，用于构建版本的。
     .gitignore，版本控制中忽略文件。
     local.properties， 指定Android SDK的路径。
     settings.gradle，指定项目中引入的模块。

  从上面的目录结构发现，在app目录下和整个项目的目录下都有共同的文件，比如.gitinignor、build.gradle、xx.iml等。其实我们可以理解为，
  xcode中，project和target的关系。app目录下，就相当于项目的一个target。所以作用域，我们也要了解。
3、构建apk。Build->Generate Signed Bundle/Apk。 其中涉及到签名秘钥.jks文件。

2019.9.16
1、安卓中dp和ios中pt的区别。
    pt和px的关系，和设备有很大关系，现在ios设备最低都是1pt = 2*2px， plus设备都是1pt = 3*3px。
    dp和px的关系，和设备有关。
    屏幕模式        像素密度           换算关系           分辨率
     ldpi          120dpi           1dp = 0.75px      240*320    // 现在几乎没有这种设备
     mdpi          160dpi           1dp = 1px         320*480    // 现在几乎没有这种设备
     hdpi          240dpi           1dp = 1.5px       480*800    // 现在几乎咩有这种设备
     xhdpi         320dpi           1dp = 2px         720*1280
     xxhdpi        480dpi           1dp = 3px         1080*1920
     xxxhdpi       640dpi           1dp = 4px         1440*2560

     苹果的pt和工业印刷的pt是不同的，ios中 1pt = 1/163 英尺。（工业印刷1pt = 72 inch）。
     android中，1dp = 1/160英尺。所以，ios中100长度，和 Android 100物理长度差不过，约等于0.15毫米。但是相对应的像素就很不一样了，
     明显android的对于像素更大。


2、LineLayout线性布局。
    id：类似ios，tag。
    gravity： 子控件对其方式。
        注意点：如果父控件gravity是horizon，那么子控件只能设置gravity垂直方向才有效果。
               如果父控件gravity是verify，那么子控件只能设置gravity是水平方向才有效果。
    layout_gravity： 相对于父控件对其方式。
    layout_wight/height: 宽/高
    layout_weight: 权重。
    backgrout: 背景，颜色或者图片

    padding/margin: 间距。

    divider： 分割线。 颜色或者图片。
    showDiveiders： 分割线位置。
    dividerPading: 分割线padding。

3、RelativeLayout相对布局。

2019.9.17
1、TableLayout。列表布局。
    特点：从上往下排列。row的数量就是我们写的控件数量。 colums列的数量需要搭配TableRow来使用。
        宽度一定是和父控件相同。
        可是设置隐藏列、拉伸列、缩小列。
2、FrameLayout。帧布局。使用场景比较少。
    特点： 子控件都是从左上开始布局。
    可以设置foreground的一些属性。
3、GridLayout。表格。
    特点： 设置row、colum设置行列。
    子控件，通过rowSpan、columSpan、rowWeight、columnWeight来控制其大小。通过row、colum来控制其位置。
    当然还有一个属性gravity属性。
4、AbsoluteLayout。绝对布局。几乎不会用到。
    其特点就是，如果设置位置、大小，不会跟着机型的改变而改变。
5、TextView，类似ios中UILable。
    常用属性，布局layout开头，
    gravity文本对其。
    text、textSize、textStyle（加粗|斜体）、textColor等。
    shadowDx、shadowDy、shadowColor设置阴影。
    边框设置其原理:
        设置shapeDrawable，然后将TextView的backgroud设置成该资源。
    设置drawable，文字+图片。如果想要设置图片，需要java代码实现。
    设置下划线。通过getPaint().setFlags来实现。
    或者是富文本。SpannadbleString。类似NSAttributeString。 其中重要属性，就是各种Span。
    常见的。。
    ForegroundColorSpan：前景色
    BackgroundColorSpan：背景色
    ClickableSpan：抽象类，可点击效果，重写onClick方法响应点击事件
    UnderlineSpan：下划线
    StrikeThroughSpan：删除线
    AbsoluteSpan：文字绝对大小
    URLSpan：超链接
    MaskFilterSpan：EmbossMaskFilter浮雕效果，BlurMaskFilter模糊效果
    RelativeSpan：文字相对大小
    ScaleXSpan：x轴缩放
    styleSpan：文字样式
    TypefaceSpan：文字字体类型
    TextApearanceSpan：文字外貌
    SuperscriptSpan：上标
    SubscriptSpan：下标
    ImageSpan：图片

2019.9.18
1、EditeText文本输入。继承TextView。
    其输入样式（是否是多行、键盘样式、大小写等）inputType。
    focuseAble和FocuseAbleInmodel的区别。focusAble用键盘是否能获取焦点。FocuseAbleInModel用软键盘是否能获取焦点。
    hint。
    textxxxx。
    imeOptions。enter键样式。
    监听方式，1、onFocusChangeLisent。2、addTextChangeLisent。
2、Button的使用。其中使用StateListDrawAble对相应状态进行设置。
    button也能进行监听，继承自TextView。
    setClick进行按钮点击监听。
3、ImageButton。src设置资源。继承ImageView。
4、RadioButton。配合RadioGroup使用。 设置图片，button = "@null" // 屏蔽默认效果。 drawableLeft 添加drawAble样式。






















